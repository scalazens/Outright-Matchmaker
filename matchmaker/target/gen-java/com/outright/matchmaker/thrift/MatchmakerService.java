/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.outright.matchmaker.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

import com.twitter.util.Future;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Try;
import com.twitter.util.Return;
import com.twitter.util.Throw;
import com.twitter.finagle.thrift.ThriftClientRequest;

public class MatchmakerService {

  /**
   * A simple memcache-like service, which stores strings by key/value.
   * You should replace this with your actual service.
   */
  public interface Iface {

    public String echocheck(String echostring) throws TException;

    public String getmatchingelements(String fromstring, String tostring, int timespan) throws TException;

  }

  public interface AsyncIface {

    public void echocheck(String echostring, AsyncMethodCallback<AsyncClient.echocheck_call> resultHandler) throws TException;

    public void getmatchingelements(String fromstring, String tostring, int timespan, AsyncMethodCallback<AsyncClient.getmatchingelements_call> resultHandler) throws TException;

  }

  public interface ServiceIface {

    public Future<String> echocheck(String echostring);

    public Future<String> getmatchingelements(String fromstring, String tostring, int timespan);

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public String echocheck(String echostring) throws TException
    {
      send_echocheck(echostring);
      return recv_echocheck();
    }

    public void send_echocheck(String echostring) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("echocheck", TMessageType.CALL, ++seqid_));
      echocheck_args args = new echocheck_args();
      args.setEchostring(echostring);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_echocheck() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "echocheck failed: out of sequence response");
      }
      echocheck_result result = new echocheck_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "echocheck failed: unknown result");
    }

    public String getmatchingelements(String fromstring, String tostring, int timespan) throws TException
    {
      send_getmatchingelements(fromstring, tostring, timespan);
      return recv_getmatchingelements();
    }

    public void send_getmatchingelements(String fromstring, String tostring, int timespan) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getmatchingelements", TMessageType.CALL, ++seqid_));
      getmatchingelements_args args = new getmatchingelements_args();
      args.setFromstring(fromstring);
      args.setTostring(tostring);
      args.setTimespan(timespan);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getmatchingelements() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getmatchingelements failed: out of sequence response");
      }
      getmatchingelements_result result = new getmatchingelements_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getmatchingelements failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void echocheck(String echostring, AsyncMethodCallback<echocheck_call> resultHandler) throws TException {
      checkReady();
      echocheck_call method_call = new echocheck_call(echostring, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class echocheck_call extends TAsyncMethodCall {
      private String echostring;
      public echocheck_call(String echostring, AsyncMethodCallback<echocheck_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.echostring = echostring;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("echocheck", TMessageType.CALL, 0));
        echocheck_args args = new echocheck_args();
        args.setEchostring(echostring);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echocheck();
      }
    }

    public void getmatchingelements(String fromstring, String tostring, int timespan, AsyncMethodCallback<getmatchingelements_call> resultHandler) throws TException {
      checkReady();
      getmatchingelements_call method_call = new getmatchingelements_call(fromstring, tostring, timespan, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getmatchingelements_call extends TAsyncMethodCall {
      private String fromstring;
      private String tostring;
      private int timespan;
      public getmatchingelements_call(String fromstring, String tostring, int timespan, AsyncMethodCallback<getmatchingelements_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromstring = fromstring;
        this.tostring = tostring;
        this.timespan = timespan;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getmatchingelements", TMessageType.CALL, 0));
        getmatchingelements_args args = new getmatchingelements_args();
        args.setFromstring(fromstring);
        args.setTostring(tostring);
        args.setTimespan(timespan);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getmatchingelements();
      }
    }

  }

  public static class ServiceToClient implements ServiceIface {
    private com.twitter.finagle.Service<ThriftClientRequest, byte[]> service;
    private TProtocolFactory protocolFactory;
    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory) {
      this.service = service;
      this.protocolFactory = protocolFactory;
    }

    public Future<String> echocheck(String echostring) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("echocheck", TMessageType.CALL, 0));
        echocheck_args __args__ = new echocheck_args();
        __args__.setEchostring(echostring);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();
      

        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<String>>() {
          public Future<String> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_echocheck());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<String> getmatchingelements(String fromstring, String tostring, int timespan) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("getmatchingelements", TMessageType.CALL, 0));
        getmatchingelements_args __args__ = new getmatchingelements_args();
        __args__.setFromstring(fromstring);
        __args__.setTostring(tostring);
        __args__.setTimespan(timespan);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();
      

        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<String>>() {
          public Future<String> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_getmatchingelements());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("echocheck", new echocheck());
      processMap_.put("getmatchingelements", new getmatchingelements());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class echocheck implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        echocheck_args args = new echocheck_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("echocheck", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        echocheck_result result = new echocheck_result();
        result.success = iface_.echocheck(args.echostring);
        oprot.writeMessageBegin(new TMessage("echocheck", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getmatchingelements implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getmatchingelements_args args = new getmatchingelements_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getmatchingelements", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getmatchingelements_result result = new getmatchingelements_result();
        result.success = iface_.getmatchingelements(args.fromstring, args.tostring, args.timespan);
        oprot.writeMessageBegin(new TMessage("getmatchingelements", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class Service extends com.twitter.finagle.Service<byte[], byte[]> {
    private final ServiceIface iface;
    private final TProtocolFactory protocolFactory;
    protected HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>> functionMap = new HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>>();
    public Service(final ServiceIface iface, final TProtocolFactory protocolFactory) {
      this.iface = iface;
      this.protocolFactory = protocolFactory;
      functionMap.put("echocheck", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          echocheck_args args = new echocheck_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          
              oprot.writeMessageBegin(new TMessage("echocheck", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }
          
          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<String> future;
          try {
            future = iface.echocheck(args.echostring);
          } catch (Exception e) {
            future = Future.exception(e);
          }
          try {
            return future.flatMap(new Function<String, Future<byte[]>>() {
              public Future<byte[]> apply(String value) {
                echocheck_result result = new echocheck_result();
                result.success = value;
                result.setSuccessIsSet(true);
          
                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
                   
                  oprot.writeMessageBegin(new TMessage("echocheck", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();
                   
                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
                try {
                  TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing echocheck");
                  oprot.writeMessageBegin(new TMessage("echocheck", TMessageType.EXCEPTION, seqid));
                  x.write(oprot);
                  oprot.writeMessageEnd();
                  oprot.getTransport().flush();
                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      
      functionMap.put("getmatchingelements", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          getmatchingelements_args args = new getmatchingelements_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          
              oprot.writeMessageBegin(new TMessage("getmatchingelements", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }
          
          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<String> future;
          try {
            future = iface.getmatchingelements(args.fromstring, args.tostring, args.timespan);
          } catch (Exception e) {
            future = Future.exception(e);
          }
          try {
            return future.flatMap(new Function<String, Future<byte[]>>() {
              public Future<byte[]> apply(String value) {
                getmatchingelements_result result = new getmatchingelements_result();
                result.success = value;
                result.setSuccessIsSet(true);
          
                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
                   
                  oprot.writeMessageBegin(new TMessage("getmatchingelements", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();
                   
                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
                try {
                  TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getmatchingelements");
                  oprot.writeMessageBegin(new TMessage("getmatchingelements", TMessageType.EXCEPTION, seqid));
                  x.write(oprot);
                  oprot.writeMessageEnd();
                  oprot.getTransport().flush();
                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      
    }
    
    public Future<byte[]> apply(byte[] request) {
      TTransport inputTransport = new TMemoryInputTransport(request);
      TProtocol iprot = protocolFactory.getProtocol(inputTransport);
    
      TMessage msg;
      try {
        msg = iprot.readMessageBegin();
      } catch (Exception e) {
        return Future.exception(e);
      }
    
      Function2<TProtocol, Integer, Future<byte[]>> fn = functionMap.get(msg.name);
      if (fn == null) {
        try {
          TProtocolUtil.skip(iprot, TType.STRUCT);
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
          TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
          TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
        } catch (Exception e) {
          return Future.exception(e);
        }
      }
    
      return fn.apply(iprot, msg.seqid);
    }

  }

  public static class echocheck_args implements TBase<echocheck_args, echocheck_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("echocheck_args");

    private static final TField ECHOSTRING_FIELD_DESC = new TField("echostring", TType.STRING, (short)1);

    public String echostring;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ECHOSTRING((short)1, "echostring");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ECHOSTRING
            return ECHOSTRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ECHOSTRING, new FieldMetaData("echostring", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(echocheck_args.class, metaDataMap);
    }

    public echocheck_args() {
    }

    public echocheck_args(
      String echostring)
    {
      this();
      this.echostring = echostring;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echocheck_args(echocheck_args other) {
      if (other.isSetEchostring()) {
        this.echostring = other.echostring;
      }
    }

    public echocheck_args deepCopy() {
      return new echocheck_args(this);
    }

    @Override
    public void clear() {
      this.echostring = null;
    }

    public String getEchostring() {
      return this.echostring;
    }

    public echocheck_args setEchostring(String echostring) {
      this.echostring = echostring;
      return this;
    }

    public void unsetEchostring() {
      this.echostring = null;
    }

    /** Returns true if field echostring is set (has been asigned a value) and false otherwise */
    public boolean isSetEchostring() {
      return this.echostring != null;
    }

    public void setEchostringIsSet(boolean value) {
      if (!value) {
        this.echostring = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ECHOSTRING:
        if (value == null) {
          unsetEchostring();
        } else {
          setEchostring((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ECHOSTRING:
        return getEchostring();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ECHOSTRING:
        return isSetEchostring();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echocheck_args)
        return this.equals((echocheck_args)that);
      return false;
    }

    public boolean equals(echocheck_args that) {
      if (that == null)
        return false;

      boolean this_present_echostring = true && this.isSetEchostring();
      boolean that_present_echostring = true && that.isSetEchostring();
      if (this_present_echostring || that_present_echostring) {
        if (!(this_present_echostring && that_present_echostring))
          return false;
        if (!this.echostring.equals(that.echostring))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(echocheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      echocheck_args typedOther = (echocheck_args)other;

      lastComparison = Boolean.valueOf(isSetEchostring()).compareTo(typedOther.isSetEchostring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEchostring()) {
        lastComparison = TBaseHelper.compareTo(this.echostring, typedOther.echostring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ECHOSTRING
            if (field.type == TType.STRING) {
              this.echostring = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.echostring != null) {
        oprot.writeFieldBegin(ECHOSTRING_FIELD_DESC);
        oprot.writeString(this.echostring);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echocheck_args(");
      boolean first = true;

      sb.append("echostring:");
      if (this.echostring == null) {
        sb.append("null");
      } else {
        sb.append(this.echostring);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class echocheck_result implements TBase<echocheck_result, echocheck_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("echocheck_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(echocheck_result.class, metaDataMap);
    }

    public echocheck_result() {
    }

    public echocheck_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echocheck_result(echocheck_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public echocheck_result deepCopy() {
      return new echocheck_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public echocheck_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echocheck_result)
        return this.equals((echocheck_result)that);
      return false;
    }

    public boolean equals(echocheck_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(echocheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      echocheck_result typedOther = (echocheck_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echocheck_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getmatchingelements_args implements TBase<getmatchingelements_args, getmatchingelements_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getmatchingelements_args");

    private static final TField FROMSTRING_FIELD_DESC = new TField("fromstring", TType.STRING, (short)1);
    private static final TField TOSTRING_FIELD_DESC = new TField("tostring", TType.STRING, (short)2);
    private static final TField TIMESPAN_FIELD_DESC = new TField("timespan", TType.I32, (short)3);

    public String fromstring;
    public String tostring;
    public int timespan;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      FROMSTRING((short)1, "fromstring"),
      TOSTRING((short)2, "tostring"),
      TIMESPAN((short)3, "timespan");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROMSTRING
            return FROMSTRING;
          case 2: // TOSTRING
            return TOSTRING;
          case 3: // TIMESPAN
            return TIMESPAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESPAN_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROMSTRING, new FieldMetaData("fromstring", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TOSTRING, new FieldMetaData("tostring", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TIMESPAN, new FieldMetaData("timespan", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getmatchingelements_args.class, metaDataMap);
    }

    public getmatchingelements_args() {
    }

    public getmatchingelements_args(
      String fromstring,
      String tostring,
      int timespan)
    {
      this();
      this.fromstring = fromstring;
      this.tostring = tostring;
      this.timespan = timespan;
      setTimespanIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getmatchingelements_args(getmatchingelements_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetFromstring()) {
        this.fromstring = other.fromstring;
      }
      if (other.isSetTostring()) {
        this.tostring = other.tostring;
      }
      this.timespan = other.timespan;
    }

    public getmatchingelements_args deepCopy() {
      return new getmatchingelements_args(this);
    }

    @Override
    public void clear() {
      this.fromstring = null;
      this.tostring = null;
      setTimespanIsSet(false);
      this.timespan = 0;
    }

    public String getFromstring() {
      return this.fromstring;
    }

    public getmatchingelements_args setFromstring(String fromstring) {
      this.fromstring = fromstring;
      return this;
    }

    public void unsetFromstring() {
      this.fromstring = null;
    }

    /** Returns true if field fromstring is set (has been asigned a value) and false otherwise */
    public boolean isSetFromstring() {
      return this.fromstring != null;
    }

    public void setFromstringIsSet(boolean value) {
      if (!value) {
        this.fromstring = null;
      }
    }

    public String getTostring() {
      return this.tostring;
    }

    public getmatchingelements_args setTostring(String tostring) {
      this.tostring = tostring;
      return this;
    }

    public void unsetTostring() {
      this.tostring = null;
    }

    /** Returns true if field tostring is set (has been asigned a value) and false otherwise */
    public boolean isSetTostring() {
      return this.tostring != null;
    }

    public void setTostringIsSet(boolean value) {
      if (!value) {
        this.tostring = null;
      }
    }

    public int getTimespan() {
      return this.timespan;
    }

    public getmatchingelements_args setTimespan(int timespan) {
      this.timespan = timespan;
      setTimespanIsSet(true);
      return this;
    }

    public void unsetTimespan() {
      __isset_bit_vector.clear(__TIMESPAN_ISSET_ID);
    }

    /** Returns true if field timespan is set (has been asigned a value) and false otherwise */
    public boolean isSetTimespan() {
      return __isset_bit_vector.get(__TIMESPAN_ISSET_ID);
    }

    public void setTimespanIsSet(boolean value) {
      __isset_bit_vector.set(__TIMESPAN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROMSTRING:
        if (value == null) {
          unsetFromstring();
        } else {
          setFromstring((String)value);
        }
        break;

      case TOSTRING:
        if (value == null) {
          unsetTostring();
        } else {
          setTostring((String)value);
        }
        break;

      case TIMESPAN:
        if (value == null) {
          unsetTimespan();
        } else {
          setTimespan((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROMSTRING:
        return getFromstring();

      case TOSTRING:
        return getTostring();

      case TIMESPAN:
        return new Integer(getTimespan());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROMSTRING:
        return isSetFromstring();
      case TOSTRING:
        return isSetTostring();
      case TIMESPAN:
        return isSetTimespan();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getmatchingelements_args)
        return this.equals((getmatchingelements_args)that);
      return false;
    }

    public boolean equals(getmatchingelements_args that) {
      if (that == null)
        return false;

      boolean this_present_fromstring = true && this.isSetFromstring();
      boolean that_present_fromstring = true && that.isSetFromstring();
      if (this_present_fromstring || that_present_fromstring) {
        if (!(this_present_fromstring && that_present_fromstring))
          return false;
        if (!this.fromstring.equals(that.fromstring))
          return false;
      }

      boolean this_present_tostring = true && this.isSetTostring();
      boolean that_present_tostring = true && that.isSetTostring();
      if (this_present_tostring || that_present_tostring) {
        if (!(this_present_tostring && that_present_tostring))
          return false;
        if (!this.tostring.equals(that.tostring))
          return false;
      }

      boolean this_present_timespan = true;
      boolean that_present_timespan = true;
      if (this_present_timespan || that_present_timespan) {
        if (!(this_present_timespan && that_present_timespan))
          return false;
        if (this.timespan != that.timespan)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getmatchingelements_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getmatchingelements_args typedOther = (getmatchingelements_args)other;

      lastComparison = Boolean.valueOf(isSetFromstring()).compareTo(typedOther.isSetFromstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromstring()) {
        lastComparison = TBaseHelper.compareTo(this.fromstring, typedOther.fromstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTostring()).compareTo(typedOther.isSetTostring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTostring()) {
        lastComparison = TBaseHelper.compareTo(this.tostring, typedOther.tostring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimespan()).compareTo(typedOther.isSetTimespan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimespan()) {
        lastComparison = TBaseHelper.compareTo(this.timespan, typedOther.timespan);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FROMSTRING
            if (field.type == TType.STRING) {
              this.fromstring = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOSTRING
            if (field.type == TType.STRING) {
              this.tostring = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TIMESPAN
            if (field.type == TType.I32) {
              this.timespan = iprot.readI32();
              setTimespanIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.fromstring != null) {
        oprot.writeFieldBegin(FROMSTRING_FIELD_DESC);
        oprot.writeString(this.fromstring);
        oprot.writeFieldEnd();
      }
      if (this.tostring != null) {
        oprot.writeFieldBegin(TOSTRING_FIELD_DESC);
        oprot.writeString(this.tostring);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESPAN_FIELD_DESC);
      oprot.writeI32(this.timespan);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getmatchingelements_args(");
      boolean first = true;

      sb.append("fromstring:");
      if (this.fromstring == null) {
        sb.append("null");
      } else {
        sb.append(this.fromstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tostring:");
      if (this.tostring == null) {
        sb.append("null");
      } else {
        sb.append(this.tostring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timespan:");
      sb.append(this.timespan);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getmatchingelements_result implements TBase<getmatchingelements_result, getmatchingelements_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getmatchingelements_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getmatchingelements_result.class, metaDataMap);
    }

    public getmatchingelements_result() {
    }

    public getmatchingelements_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getmatchingelements_result(getmatchingelements_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getmatchingelements_result deepCopy() {
      return new getmatchingelements_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getmatchingelements_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getmatchingelements_result)
        return this.equals((getmatchingelements_result)that);
      return false;
    }

    public boolean equals(getmatchingelements_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getmatchingelements_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getmatchingelements_result typedOther = (getmatchingelements_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getmatchingelements_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
